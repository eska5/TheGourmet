{"ast":null,"code":"import{useEffect}from'react';export default function useOnClickOutside(ref,handler){useEffect(function(){var listener=function listener(event){// Do nothing if clicking ref's element or descendent elements\nif(!ref.current||ref.current.contains(event.target)){return;}handler(event);};document.addEventListener('mousedown',listener);document.addEventListener('touchstart',listener);return function(){document.removeEventListener('mousedown',listener);document.removeEventListener('touchstart',listener);};},// Add ref and handler to effect dependencies\n// It's worth noting that because passed in handler is a new ...\n// ... function on every render that will cause this effect ...\n// ... callback/cleanup to run every render. It's not a big deal ...\n// ... but to optimize you can wrap handler in useCallback before ...\n// ... passing it into this hook.\n[ref,handler]);}","map":{"version":3,"sources":["C:/Users/lukin/OneDrive/inf/Gourmet/src/Functions/use-onclick-outside.js"],"names":["useEffect","useOnClickOutside","ref","handler","listener","event","current","contains","target","document","addEventListener","removeEventListener"],"mappings":"AAAA,OAASA,SAAT,KAA0B,OAA1B,CAEA,cAAe,SAASC,CAAAA,iBAAT,CAA2BC,GAA3B,CAAgCC,OAAhC,CAAyC,CACtDH,SAAS,CACP,UAAM,CACJ,GAAMI,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,KAAK,CAAI,CACxB;AACA,GAAI,CAACH,GAAG,CAACI,OAAL,EAAgBJ,GAAG,CAACI,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAApB,CAAwD,CACtD,OACD,CAEDL,OAAO,CAACE,KAAD,CAAP,CACD,CAPD,CASAI,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,CAAuCN,QAAvC,EACAK,QAAQ,CAACC,gBAAT,CAA0B,YAA1B,CAAwCN,QAAxC,EAEA,MAAO,WAAM,CACXK,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,CAA0CP,QAA1C,EACAK,QAAQ,CAACE,mBAAT,CAA6B,YAA7B,CAA2CP,QAA3C,EACD,CAHD,CAID,CAlBM,CAmBP;AACA;AACA;AACA;AACA;AACA;AACA,CAACF,GAAD,CAAMC,OAAN,CAzBO,CAAT,CA2BD","sourcesContent":["import { useEffect } from 'react';\r\n\r\nexport default function useOnClickOutside(ref, handler) {\r\n  useEffect(\r\n    () => {\r\n      const listener = event => {\r\n        // Do nothing if clicking ref's element or descendent elements\r\n        if (!ref.current || ref.current.contains(event.target)) {\r\n          return;\r\n        }\r\n\r\n        handler(event);\r\n      };\r\n\r\n      document.addEventListener('mousedown', listener);\r\n      document.addEventListener('touchstart', listener);\r\n\r\n      return () => {\r\n        document.removeEventListener('mousedown', listener);\r\n        document.removeEventListener('touchstart', listener);\r\n      };\r\n    },\r\n    // Add ref and handler to effect dependencies\r\n    // It's worth noting that because passed in handler is a new ...\r\n    // ... function on every render that will cause this effect ...\r\n    // ... callback/cleanup to run every render. It's not a big deal ...\r\n    // ... but to optimize you can wrap handler in useCallback before ...\r\n    // ... passing it into this hook.\r\n    [ref, handler]\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}